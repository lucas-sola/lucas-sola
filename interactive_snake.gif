from PIL import Image, ImageDraw
import random

# Configurações do cenário
grid_width, grid_height = 30, 10  # Mais comprido e baixo
cell_size = 25
total_frames = 100

# Cores
bg_color = (20, 20, 20)
snake_color = (0, 200, 0)
head_color = (0, 255, 0)
apple_color = (255, 0, 0)
border_color = (70, 70, 70)

# Inicialização
snake = [(5, 5)]
direction = (1, 0)
apples = []
frames = []
score = 0

# Função para desenhar o frame
def draw_scene(snake, apples):
    img = Image.new("RGB", (grid_width * cell_size, grid_height * cell_size), bg_color)
    draw = ImageDraw.Draw(img)

    # Grade do cenário
    for x in range(grid_width):
        for y in range(grid_height):
            draw.rectangle(
                [x * cell_size, y * cell_size, (x+1) * cell_size - 1, (y+1) * cell_size - 1],
                outline=border_color
            )

    # Maçãs
    for ax, ay in apples:
        draw.ellipse([
            ax * cell_size + 5, ay * cell_size + 5,
            (ax+1) * cell_size - 5, (ay+1) * cell_size - 5
        ], fill=apple_color)

    # Cobra
    for i, (x, y) in enumerate(snake):
        color = head_color if i == 0 else snake_color
        draw.rectangle([
            x * cell_size + 2, y * cell_size + 2,
            (x+1) * cell_size - 2, (y+1) * cell_size - 2
        ], fill=color)

    return img

# Função para gerar maçã em local livre
def spawn_apple():
    while True:
        pos = (random.randint(0, grid_width - 1), random.randint(0, grid_height - 1))
        if pos not in snake and pos not in apples:
            return pos

# Loop para criar os frames
for frame_num in range(total_frames):
    head_x, head_y = snake[0]

    # Movimento aleatório em zigue-zague
    if frame_num % 10 == 0:
        direction = random.choice([(1,0), (-1,0), (0,1), (0,-1)])

    new_head = (head_x + direction[0], head_y + direction[1])

    # Colisão
    if (new_head in snake or
        not (0 <= new_head[0] < grid_width) or
        not (0 <= new_head[1] < grid_height)):
        print("Game Over! Colisão detectada.")
        break

    # Move a cobrinha
    snake.insert(0, new_head)

    # Come maçã
    if new_head in apples:
        apples.remove(new_head)
        score += 1
    else:
        snake.pop()  # Não cresceu, remove a cauda

    # Gera novas maçãs ocasionalmente
    if len(apples) < 3 and random.random() < 0.1:
        apples.append(spawn_apple())

    # Adiciona o frame
    frames.append(draw_scene(snake, apples))

# Salva o GIF
output_path = "interactive_snake.gif"
frames[0].save(output_path, save_all=True, append_images=frames[1:], optimize=False, duration=200, loop=0)

print(f"GIF salvo como '{output_path}' com {len(frames)} frames!")